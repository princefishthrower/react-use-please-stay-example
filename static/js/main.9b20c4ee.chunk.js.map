{"version":3,"sources":["components/CodeHighlighter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CodeHighlighter","props","code","defaultProps","theme","language","className","style","tokens","getLineProps","getTokenProps","padding","map","line","i","key","token","onClick","navigator","clipboard","writeText","App","useState","titles","setTitles","interval","setInterval","AnimationType","LOOP","animationType","setAnimationType","faviconLinks","setFaviconLinks","shouldAlwaysPlay","setShouldAlwaysPlay","usePleaseStay","title","join","faviconLink","toString","htmlFor","id","value","onChange","event","target","split","length","slice","type","placeholder","e","parseInt","name","checked","CASCADE","MARQUEE","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.9b20c4ee.chunk.js","sourcesContent":["import Highlight, { defaultProps } from \"prism-react-renderer\";\nimport * as React from \"react\";\nimport theme from \"prism-react-renderer/themes/dracula\";\n\nexport interface ICodeHighlighterProps {\n  code: string;\n}\n\nexport function CodeHighlighter(props: ICodeHighlighterProps) {\n  const { code } = props;\n  return (\n    <>\n      <Highlight {...defaultProps} theme={theme} code={code} language={\"tsx\"}>\n        {({ className, style, tokens, getLineProps, getTokenProps }) => (\n          <pre className={className} style={{ ...style, padding: \"1rem\" }}>\n            {tokens.map((line, i) => (\n              <div {...getLineProps({ line, key: i })}>\n                {line.map((token, key) => (\n                  <span {...getTokenProps({ token, key })} />\n                ))}\n              </div>\n            ))}\n          </pre>\n        )}\n      </Highlight>\n      <button\n        className=\"btn btn-primary\"\n        onClick={() => navigator.clipboard.writeText(code)}\n      >\n        Copy Code\n      </button>\n    </>\n  );\n}\n","import React, { useState } from \"react\";\nimport {\n  AnimationType,\n  usePleaseStay,\n} from \"@fullstackcraftllc/react-use-please-stay\";\nimport { ArrayOfOneOrMore } from \"@fullstackcraftllc/react-use-please-stay/dist/types/ArrayOfOneOrMore\";\nimport { ArrayOfTwoOrMore } from \"@fullstackcraftllc/react-use-please-stay/dist/types/ArrayOfTwoOrMore\";\nimport { CodeHighlighter } from \"./components/CodeHighlighter\";\n\nfunction App() {\n  const [titles, setTitles] = useState<ArrayOfOneOrMore<string>>([\n    \"Newline!\",\n    \"TypeScript!\",\n  ]);\n  const [interval, setInterval] = useState(1000);\n  const [animationType, setAnimationType] = useState(AnimationType.LOOP);\n  const [faviconLinks, setFaviconLinks] = useState<ArrayOfTwoOrMore<string>>([\n    \"https://d8dgeb1f3fxgw.cloudfront.net/static/img/icons/apple-touch-icon.png\",\n    \"https://www.typescriptlang.org/favicon-32x32.png\",\n  ]);\n  const [shouldAlwaysPlay, setShouldAlwaysPlay] = useState(true);\n  usePleaseStay({\n    titles,\n    interval,\n    animationType,\n    faviconLinks,\n    shouldAlwaysPlay,\n  });\n\n  const code = `usePleaseStay({\n    titles: [\n      ${titles.map((title) => `\"${title}\"`).join(\",\\n      \")}\n    ]\n    interval: ${interval},\n    animationType: ${animationType},\n    faviconLinks: [\n      ${faviconLinks.map((faviconLink) => `\"${faviconLink}\"`).join(\",\\n      \")}\n    ],\n    shouldAlwaysPlay: ${shouldAlwaysPlay.toString()}\n})`\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"mt-4\">\n        <pre>react-use-please-stay</pre>\n      </h1>\n      <h2>\n        A fun React hook that animates the document title and/or favicon when\n        focus from the page is lost.\n      </h2>\n      <p>Install with:</p>\n      <CodeHighlighter code={\"npm install --save react-use-please-stay\"}/>\n      <p className=\"mt-4\">Interactive code example (try changing some fields in the form below!)</p>\n      <CodeHighlighter code={code}/>\n      <div className=\"form-group mt-4\">\n        <label htmlFor=\"titles\">\n          <pre>titles</pre>\n        </label>\n        <br />\n        <small className=\"form-text text-muted\">\n          You can comma separate multiple titles\n        </small>\n        <textarea\n          id=\"titles\"\n          className=\"form-control\"\n          value={titles}\n          onChange={(event) => {\n            const titles = event.target.value.split(\",\");\n            setTitles(\n              titles.length > 0\n                ? [titles[0], ...titles.slice(1, titles.length)]\n                : [\"\"]\n            );\n          }}\n        />\n      </div>\n      <div className=\"form-group mt-4\">\n        <label htmlFor=\"interval\">\n          <pre>interval</pre>\n        </label>\n        <input\n          type=\"number\"\n          className=\"form-control\"\n          id=\"interval\"\n          placeholder=\"Enter interval\"\n          value={interval}\n          onChange={(e) => setInterval(parseInt(e.target.value))}\n        />\n      </div>\n      <div className=\"form-group mt-4\">\n        <label htmlFor=\"animationType\">\n          <pre>animationType</pre>\n        </label>\n        <div className=\"form-check\">\n          <input\n            className=\"form-check-input\"\n            type=\"radio\"\n            name=\"animationType\"\n            id=\"animationType1\"\n            value={AnimationType.LOOP}\n            checked={animationType === AnimationType.LOOP}\n            onChange={(e) => setAnimationType(e.target.value as AnimationType)}\n          />\n          <label className=\"form-check-label\" htmlFor=\"animationType1\">\n            AnimationType.LOOP\n          </label>\n        </div>\n        <div className=\"form-check\">\n          <input\n            className=\"form-check-input\"\n            type=\"radio\"\n            name=\"animationType\"\n            id=\"animationType2\"\n            value={AnimationType.CASCADE}\n            checked={animationType === AnimationType.CASCADE}\n            onChange={(e) => setAnimationType(e.target.value as AnimationType)}\n          />\n          <label className=\"form-check-label\" htmlFor=\"animationType2\">\n            AnimationType.CASCADE\n          </label>\n        </div>\n        <div className=\"form-check\">\n          <input\n            className=\"form-check-input\"\n            type=\"radio\"\n            name=\"animationType\"\n            id=\"animationType2\"\n            value={AnimationType.MARQUEE}\n            checked={animationType === AnimationType.MARQUEE}\n            onChange={(e) => setAnimationType(e.target.value as AnimationType)}\n          />\n          <label className=\"form-check-label\" htmlFor=\"animationType2\">\n            AnimationType.MARQUEE\n          </label>\n        </div>\n      </div>\n      <div className=\"form-group mt-4\">\n        <label htmlFor=\"faviconUrl\">Favicon Links</label>\n        <small id=\"faviconUrlHelp\" className=\"form-text text-muted\">\n          You can comma separate multiple favicon links\n        </small>\n        <textarea\n          id=\"faviconLinks\"\n          className=\"form-control\"\n          value={faviconLinks}\n          onChange={(event) => {\n            const faviconLinks = event.target.value.split(\",\");\n            setFaviconLinks(\n              faviconLinks.length > 1\n                ? [\n                    faviconLinks[0],\n                    faviconLinks[1],\n                    ...faviconLinks.slice(2, faviconLinks.length),\n                  ]\n                : [\"\", \"\"]\n            );\n          }}\n        ></textarea>\n        <p>Try some of these:</p>\n        <p>\n          Newline Favicon:\n          https://d8dgeb1f3fxgw.cloudfront.net/static/img/icons/apple-touch-icon.png\n        </p>\n        <p>\n          TypeScript Favicon: https://www.typescriptlang.org/favicon-32x32.png\n        </p>\n        <p>Redux Favicon: https://redux.js.org/img/favicon/favicon.ico</p>\n        <p>Gatsby Favicon: https://www.gatsbyjs.com/favicon-32x32.png</p>\n        <p>\n          Electron Favicon:\n          https://www.electronjs.org/images/favicon.b7a59262df48d6563400baf5671da548.ico\n        </p>\n      </div>\n      <div className=\"form-group mt-4\">\n        <pre className=\"m-0 mt-4\">shouldAlwaysPlay</pre>\n        <div className=\"form-group form-check\">\n          <input\n            type=\"checkbox\"\n            className=\"form-check-input\"\n            id=\"shouldAlwaysPlay\"\n            checked={shouldAlwaysPlay}\n            onChange={(e) => setShouldAlwaysPlay(e.target.checked)}\n          />\n          <label className=\"form-check-label\" htmlFor=\"shouldAlwaysPlay\">\n            <pre>{shouldAlwaysPlay.toString()}</pre>\n          </label>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.css\"\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}